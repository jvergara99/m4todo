Video S3 del módulo 4
Elaborar un API web o mejor dicho un backend.. vamos a exponer una serie de endpoint, rutas o urls que ayudaran que otro software
interactue con el nuestro y proporcionarle la información que necesite.
Como cualquier aplicación el punto de entra será por el controlador (esta será una arquitectura basada en N capas, nombre genérico) donde una de las
capas es el controlador (es como el cerebro), esta es la capa que recibe las peticiones HTTP, es decir, sabe como obtener la información
hablando del protocolo HTTP (obtener y responder peticiones), tendrá un single responsability; esta capa controlador no se preocupa si hay conexión a BD, de consultas a BD, etc. Solo  se relaciona y resulve todo lo que tiene que ver con HTTP

1. Creamo dentro de main-java la carpeta: controller y agregamos la clase: TodoController.java
2. Hay que avisarle a sprint que este es un controlador: @RestController
3. Vamos a definir las operaciones o métodos: obtener tares, crear nueva tarea, marcar como completada una tarea, obtener una sola tarea, ...cada una
de estas operaciones será un endpoint o ruta
4. Debemos ahora modelar las tareas, creamos n main-java la carpeta: model y dentro de model la clase: Todo.java

5. En TodoController, creamos el método getAll() con el endpoint @RequestMapping("/obtenerTodos") el URL para acceder sería:
http://localhost:8080/obtenerTodos aquí Spring convierte a un JSON la salida al navegador

6. En TodoController, creamos el método create(), este no lo debemos pensar como POO donde recibimos por parte cada uno de los atributos ( para
el id estos lo creamos nosotros y para completed como es tarea nueva pues lo consideramos false). ES MAS FACIL RECIBIR TODO JUNTO QUE EN parte


7. Instalar Postman y en enviar peticiones para obtener Todos: localhost:8080/obtenerTodos
8. Enviar peticiones desde Postman (body - raw - json  e ingresar json con title y descriptio) para crear Todos: localhost:8080/crearTodo

//Ahora validaremos campos, title y description, para evitar valores null
9. Detenemos ejecución y modificamos: build.gradle, agregamos dependecies: implementation 'org.springframework.boot:spring-boot-starter-validation' Con esta agregamos la biblioteca de Beans de Spring
10. Como validar los datos, todo lo que tenga RequestBody lo podemos validar agregando anotación @Valid: public Todo create(@Valid @RequestBody Todo data) 
11. Después de lo anterior, en el modelo, validamos los atributos requeridos con la anotación @NotNull:  @NonNull - private String title; También, 
podemos indicar que el tamaño del title no exceda los 100 caracteres: @Size(max=100).
En resumen, @NotNull y @Size son las anotaciones para hacer las validaciones en Spring

12. Correr código y verificar validación ... desde Postman OK

13. Hasta aquí... observemos el códig y ¿Qué errores o aspectos podemos mejorar? observemos el modelo y nos dice que queremos almacenar tareas (id, title, ...), lo primero es que veo un id y completed que no utilizo (yo los genero pero no los recibo) y solo ciertos un datos que validamos; en términos semánticos tenemos un conflicto, unos se validd y otros no ...ej. cómo decirle que en actualización el title puede ser nulo pero la descripción no, o que ambos son nulos, etc... aquí entran los DTO 
Los DTO Data Transfer Object hace referencia a cómo se ve la información (no en el almacenamiento) al momento de la transmisión de los datos. En lo smétodos implementados obtenerTodos y crearTodo... estoy transmitiendo datos/información. Tiene que haber un diferencia en cómo los transmito y cómo los almaceno, en ocasiones las dos son iguales pero en otras no, 

13. Para esto vamos a crear los DTOs para los datos de entrada y los datos de salida: crear carpeta dto: main-java-dto y dentro las clases DTOs:
CreateTodoDTO.java y TodoDTO.java. Para el CreateTodoDTo solo requerimos que nos den un title y una description
En resumen, diseñamos cómo se ven los datos de entrada (diferente a como están en la memoria), una cosa es como crear los Todo y la otra cómo los almaceno. NOTA los DTO pueden no llevar constructor, en esta caso se deja sin crear. En definitiva se tranformo una lista de model a DTO 